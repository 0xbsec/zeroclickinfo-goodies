{
    "id": "mongodb_cheat_sheet",
    "name": "MongoDB",
    "template_type": "terminal",
    "description": "Mongo shell",
    "metadata": {
        "sourceName": "Codecentric",
        "sourceUrl": "https://blog.codecentric.de/files/2012/12/MongoDB-CheatSheet-v1_0.pdf"
    },
    "aliases": [
        "mongo db",
        "mongo db shell",
        "MongoDB"
    ],
    "section_order": [
        "Basic Conceptes & Shell Commands",
        "BSON Types",
        "Inserting Documents",
        "Finding Documents",
        "Finding Documents using Operators",
        "Updating Documents",
        "Removing Documents",
        "Working with Indexes",
        "Indexes - Hints & Stats",
        "Top & Stats System Commands",
        "Pipeline Stages",
        "Comparison with SQL",
        "Replica Sets",
        "Sharding",
        "Durability of Writes"
    ],
    "sections": {
        "Basic Conceptes & Shell Commands": [
            {
                "key": "db.collection.<command>",
                "val": "Db – implicit handle to the used database, collection – name of the used collection"              
            },
            {
                "key": "use <database>",
                "val": "Switch to another database"
            },
            {
                "key": "show collections",
                "val": "Lists the available collections"
            },
            {
                "key": "help",
                "val": "Prints available commands and help"
            }
        ],
        "BSON Types": [
            {
                "key": "Double",
                "val": "1"
            },
            {
                "key": "String",
                "val": "2"
            },
            {
                "key": "Object",
                "val": "3"
            },
            {
                "key": "Array",
                "val": "4"
            },
            {
                "key": "Binary Data",
                "val": "5"
            },
            {
                "key": "Undefined",
                "val": "6 (Deprecated)"
            },
            {
                "key": "Obect Id",
                "val": "7"
            },
            {
                "key": "Boolean",
                "val": "8"
            },
            {
                "key": "Date",
                "val": "9"
            },
            {
                "key": "Null",
                "val": "10"
            }
        ],
        "Inserting Documents": [
            {
                "key": "db.collection.insert(<document or array of documents>,\\{keys,options\\})",
                "val": "Insert a document or documents into collection"
            }
        ],
        "Finding Documents": [
            {
                "key": "db.collection.findOne()",
                "val": "Finds one arbitrary document"
            },
            {
                "key": "db.collection.find().prettyPrint()",
                "val": "Finds all documents and using nice formatting"
            },
            {
                "key": "db.collection.find(\\{\\}, \\{key:true, _id:false\\})",
                "val": "Shows only the respective key of the collection"
            },
            {
                "key": "db.collection.findOne(\\{'key':'value'\\})",
                "val": "Finds one document by corresponding attribute"
            }
        ],
        "Finding Documents using Operators": [
            {
                "key": "db.collection.find(\\{class:\\{$gt:’P'\\}\\})",
                "val": "Greater than / greater than equals"
            },
            {
                "key": "db.collection.find(\\{class:\\{$lte:’P'\\}\\})",
                "val": "Lesser than / lesser than equals"
            },
            {
                "key": "db.collection.find(\\{type:\\{$exists:true\\}\\})",
                "val": "Does an attribute exist or not"
            },
            {
                "key": "db.collection.find(\\{name:\\{$regex:’^USS\\sE’\\}\\})",
                "val": "Perl-style pattern matching"
            },
            {
                "key": "db.collection.find(\\{name:\\{$type:2\\}\\})",
                "val": "Search by type of an element"
            }
        ],
        "Updating Documents": [
            {
                "key": "db.ships.update(\\{key1:value1\\}, \\{key2:value2\\})",
                "val": "Replaces the whole document"
            },
            {
                "key": "db.collection.update(\\{key:value\\},\\{$set : \\{operator:opt, class:c\\}\\})",
                "val": "Sets / changes certain attributes of a given document"
            },
            {
                "key": "db.collection.update(\\{key:value\\},\\{$unset : \\{operator : 1\\}\\})",               
                "val": "Sets / changes certain attributes of a given document"
            },
            {
                "key": "db.collection.update(\\{key:value\\},\\{$unset : \\{operator : 1\\}\\})",
                "val": "Removes an attribute from a given document"
            }
        ],
        "Removing Documents": [
            {
                "key": "db.collection.remove(\\{key:value\\})",
                "val": "Removes the document"
            },
            {
                "key": "db.collection.remove(\\{key:\\{$regex:’^USS\\sE’\\}\\})",
                "val": "Removes using operator"                
            }
        ],
        "Working with Indexes": [
            {
                "key": "db.collection.ensureIndex(keys, options)",
                "val": "Creating an index"
            },
            {
                "key": "db.collection.dropIndex(keys, options)",
                "val": "Dropping an index"
            },
            {
                "key": "db.collection.ensureIndex(keys, options)",
                "val": "Creating a compound index"
            },
            {
                "key": "db.collection.dropIndex(\\{keys, options)",
                "val": "Dropping a compound index"
            },
            {
                "key": "db.collection.ensureIndex(keys, options, \\{unique : true\\})",
                "val": "Creating a unique compound index"
            }
        ],
        "Indexes - Hints & Stats": [
            {
                "key": "db.collection.find (\\{key:value\\}).explain()",
                "val": "Explains index usage"
            },
            {
                "key": "db.collection.stats()",
                "val": "Index statistics"
            },
            {
                "key": "db.collection.totalIndexSize()",
                "val": "Index size"
            }
        ],
        "Top & Stats System Commands": [
            {
                "key": "./mongotop",
                "val": "Shows time spent per operations per collection"
            },
            {
                "key": "./mongostat",
                "val": "Shows snapshot on the MongoDB system"
            }
        ],
        "Pipeline Stages": [
            {
                "key": "$project",
                "val": "Change the set of documents by modifying keys and values. This is a 1:1 mapping."
            },
            {
                "key": "$match",
                "val": "This is a filtering operation and thus this can reduce the amount of documents that are given as input to the next stage. This can be used for example if aggregation should only happen on a subset of the data."
            },
            {
                "key": "$group",
                "val": "This does the actual aggregation and as we are grouping by one or more keys this can have a reducing effect on the amount of documents."
            },
            {
                "key": "$sort",
                "val": "Sorting the documents one way or the other for the next stage. It should be noted that this might use a lot of memory. Thus if possible one should always try to reduce the amount of documents first."
            },
            {
                "key": "$skip",
                "val": "With this it is possible to skip forward in the list of documents for a given amount of documents. This allows for example starting only from the 10th document. Typically this will be used together with “$sort” and especially together with “$limit”."
            },
            {
                "key": "$limit",
                "val": "This limits the amount of documents to look at by the given number starting from the current position."
            },
            {
                "key": "$unwind",
                "val": "This is used to unwind document that are using arrays. When using an array the data is kind of pre-joined and this operation will be undone with this to have individual documents again. Thus with this stage we will increase the amount of documents for the next stage."
            }
        ],
        "Comparison with SQL": [
            {
                "key": "$match",
                "val": "WHERE"
            },
            {
                "key": "$group",
                "val": "GROUP BY"
            },
            {
                "key": "$match",
                "val": "HAVING"
            },
            {
                "key": "$project",
                "val": "SELECT"
            },
            {
                "key": "$sort",
                "val": "ORDER BY"
            },
            {
                "key": "$limit",
                "val": "LIMIT"
            },
            {
                "key": "$sum",
                "val": "SUM"
            },
            {
                "key": "$sum",
                "val": "COUNT"
            },
            {
                "key": "$unwind",
                "val": "JOIN"
            }
        ],
        "Replica Sets": [
            {
                "key": "Regular",
                "val": "This is the most typical kind of node. It can act as a primary or secondary node"
            },
            {
                "key": "Arbiter",
                "val": "Arbiter nodes are only there for voting purposes. They can be used to ensure that there is a certain amount of nodes in a replica set even though there are not that many physical servers."
            },
            {
                "key": "Delayed",
                "val": "Often used as a disaster recovery node. The data stored here is usually a few hours behind the real working data."
            },
            {
                "key": "Hidden",
                "val": "Often used for analytics in the replica set."
            }
        ],
        "Sharding": [
            {
                "key": "1",
                "val": "Every document has to define a shard-key."
            },
            {
                "key": "2",
                "val": "The value of the shard-key is immutable."
            },
            {
                "key": "3",
                "val": "The shard-key must be part of an index and it must be the first field in that index."
            },
            {
                "key": "4",
                "val": "There can be no unique index unless the shard-key is part of it and is then the first field."
            },
            {
                "key": "5",
                "val": "Reads done without specifying the shard-key will lead to requests to all the different shards."
            },
            {
                "key": "6",
                "val": "The shard-key must offer sufficient cardinality to be able to utilize all shards."
            }
        ],
        "Durability of Writes": [
            {
                "key": "w=0 && j=0",
                "val": "This is “fire and forget”."
            },
            {
                "key": "w=1 && j=0",
                "val": "Waits for an acknowledgement that the write was received and no indexes have been violated. Data can still be lost."
            },
            {
                "key": "w=1 && j=1",
                "val": "The most save configuration by waiting for the write to the journal to be completed"
            },
            {
                "key": "w=0 && j=1",
                "val": "Basically as same as above."
            }
        ]
    }
}