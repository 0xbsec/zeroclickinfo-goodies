{
	"id": "python_data_science_cheat_sheet",
	"name": "python data science",
	"description": "Using python data science Tools",
	"metadata": {
		"sourceName": "quandl",
		"sourceUrl": "https://s3.amazonaws.com/quandl-static-content/Documents/Quandl+-+Pandas,+SciPy,+NumPy+Cheat+Sheet.pdf"
	},
	"aliases": [
		"python data science tools", "python data science libraries", "python machine learning tool", "python machine learning libraries" 
	],
	"section_order": [
		"NumPy / SciPy",
		"Pandas",
		"Matplotlib"
	],
	"template_type": "terminal",
	"sections": {
		"NumPy / SciPy": [{
			"key": "arr = array(\[\])",
			"val": "Create numpy array"
		}, {
			"key": "arr.shape",
			"val": "Shape of an array"
		}, {
			"key": "convolve(a,b)",
			"val": "Linear convolution of two sequences"
		}, {
			"key": "arr.reshape()",
			"val": "Reshape array."
		}, {
			"key": "sum(arr)",
			"val": "Sum all elements of array."
		}, {
			"key": "mean(arr)",
			"val": "Compute mean of array."
		}, {
			"key": "std(arr)",
			"val": "Compute standard deviation of array"
		}, {
			"key": "dot(arr1,arr2)",
			"val": "Compute inner product of two arrays."
		}, {
			"key": "vectorize()",
			"val": "Turn a scalar function into one which accepts & returns vectors."
		}

		],
		"Pandas": [{
			"key": "s = Series (data, index)",
			"val": "Create a Series."
		}, {
			"key": "df = DataFrame (data, index, columns)",
			"val": "Create a DataFrame."
		}, {
			"key": "df[col]",
			"val": "Select column."
		}, {
			"key": "df.iloc[label]",
			"val": "Select row by label."
		}, {
			"key": "df.index",
			"val": "Return DataFrame index."
		}, {
			"key": "df.drop()",
			"val": "Delete given row or column. Pass axis=1 for columns."
		}, {
			"key": "df1 = df1.reindex_like(df1,df2)",
			"val": "Reindex df1 with index of df2."
		}, {
			"key": "df.reset_index()",
			"val": "Reset index, putting old index in column named index."
		}, {
			"key": "df.reindex()",
			"val": "Change DataFrame index, new indecies set to NaN."
		}, {
			"key": "df.head(n)",
			"val": "Show first n rows."
		}, {
			"key": "df.tail(n)",
			"val": "Show last n rows."
		}, {
			"key": "df.sort()",
			"val": "Sort index. Pass axis=1 for columns."
		}, {
			"key": "df.pivot(index,column,values)",
			"val": "Pivot DataFrame, using new conditions."
		}, {
			"key": "df.T",
			"val": "Transpose DataFrame."
		}, {
			"key": "df.stack()",
			"val": "Change lowest level of column labels into innermost row index."
		}, {
			"key": "df.unstack()",
			"val": "Change innermost row index into lowest level of column labels."
		}, {
			"key": "df.applymap()",
			"val": "Apply function to every element in DataFrame."
		}, {
			"key": "df.apply()",
			"val": "Apply function along a given axis."
		}, {
			"key": "df.dropna()",
			"val": "Drops rows where any data is missing."
		}, {
			"key": "df.count()",
			"val": "Returns Series of row counts for every column."
		}, {
			"key": "df.min()",
			"val": "Return minimum of every column."
		}, {
			"key": "df.max()",
			"val": "Return maximum of every column."
		}, {
			"key": "df.describe()",
			"val": "Generate various summary statistics for every column."
		}, {
			"key": "concat()",
			"val": "Merge DataFrame or Series objects. Pass axis=1 for column wise."
		}, {
			"key": "df.to_csv('foo.csv')",
			"val": "Save to CSV"
		}, {
			"key": "read_csv('foo.csv')",
			"val": "Read CSV into DataFrame."
		}, {
			"key": "to_excel('foo.xlsx', sheet_name)",
			"val": "Save to Excel."
		}, {
			"key": "read_excel('foo.xlsx','sheet1', index_col = None, na_values = \['NA'\])",
			"val": "Read exel into DataFrame."
		}


		],
		"Matplotlib": [{
			"key": "plot()",
			"val": "Plot data or plot a function against a range."
		}, {
			"key": "xlabel()",
			"val": "Label the x-axis."
		}, {
			"key": "ylabel()",
			"val": "Label the y-axis."
		}, {
			"key": "title()",
			"val": "Title the graph."
		}, {
			"key": "subplot(n,x,y)",
			"val": "Create multiple plots; n- number of plots, x - number horizontally displayed, y- number vertically displayed."
		}, {
			"key": "xticks([],[])",
			"val": "Set tick values for x-axis. First array for values, second for labels."
		}, {
			"key": "yticks([],[])",
			"val": "Set tick values for y-axis. First array for values, second for labels."
		}, {
			"key": "ax=gca()",
			"val": "Select current axis."
		}, {
			"key": "ax.spines[].set_color()",
			"val": "Change axis color, none to remove."
		}, {
			"key": "ax.spines[].set_position()",
			"val": "Change axis position. Can change coordinate space."
		}, {
			"key": "savefig('foo.png')",
			"val": "Save plot."
		}

		]
	}
}
