{
    "id": "java_file_handling_cheat_sheet",
    "name": "Java File Handling",
    

    "aliases": [
        "java file handling"
    ],

    "template_type": "terminal",

    "section_order": [
        "Buffered Streams",
        "Character Streams",
        "Data Streams",
        "Byte Streams"
        
    ],

    "sections": {
        "Byte Streams": [
            {
                "key": "FileInputStream in = \nnew FileInputStream(\"xanadu.txt\");\n\n int c; \n\n while ((c = in.read()) != -1) \\{\n\tSystem.out.println(c);\n\\}\n\n in.close();",
                "val": "Uses byte stream to perform input of 8 bits. Read method returns integer or long."
            },
            {
                "key": "FileOutputStream out = \nnew FileOutputStream(\"outagain.txt\"); \n\nout.write(100); \n\n out.close();",
                "val": "Uses byte stream to perform output of 8 bits."
            },
            {
                "key": "FileOutputStream out = \nnew FileOutputStream(\"outagain.txt\",true);\n\nout.write(100); \n\nout.close();",
                "val": "Appends data you write instead of overwriting old data. Constructor is FileOutputStream(File file, boolean append) or FileOutputStream(Strinf fileName, boolean append)."
            }
        ],
        "Character Streams": [
            {
                "key": "FileReader inputStream = new FileReader\n(\"xanadu.txt\");\n\n int c; \n\n while ((c = inputStream.read()) != -1) \\{\n\tSystem.out.println(c);\n\\} \n\n inputStream.close();",
                "val": "Reads from file as 16 bits. Integer c holds character value in its last 16 bits."
            },
            {
                "key": "FileWriter outputStream = \nnew FileWriter(\"characteroutput.txt\");\n\n outputStream.write(100); \n\n outputStream.close();",
                "val": "Writes to file in terms of 16 bits. "
            },
            {
                "key": "FileWriter outputStream = new FileWriter\n(\"characteroutput.txt\",true);\n\n outputStream.write(100); \n\n outputStream.close();",
                "val": "Use this constructor to append data to file. The constructor format is FileWriter(File file, boolean append) or FileWriter(String fileName, boolean append)."
            }
        ],
        "Buffered Streams": [
            
            {
                "key": "FileReader inputStream = new BufferedReader(new FileReader(\"xanadu.txt\"));\n\n int c; \n\n while ((c = inputStream.read()) != -1) \\{\n\tSystem.out.println(c); \n\\} \n\n inputStream.close();",
                "val": "Helps to make the program efficient by avoiding each request be handled by the OS. Buffered input streams read data from a memory area known as a buffer; the native input API is called only when the buffer is empty."
            },
            {
                "key": "FileWriter outputStream = \nnew BufferedWriter(new FileWriter(\"characteroutput.txt\"));\n\n outputStream.write(100); \n\n outputStream.close();",
                "val": "Buffered output streams write data to a buffer, and the native output API is called only when the buffer is full."
            },
            {
                "key": "FileInputStream in = \nnew BufferedInputStream(\nnew FileInputStream(\"xanadu.txt\"));\n\n int c; \n\n while ((c = in.read()) != -1) \\{\n\t System.out.println();\n\\} \n\n in.close();",
                "val": "Reads byte data from file but reads data from a memory area known as a buffer; the native input API is called only when the buffer is empty."
            },
            {
                "key": "FileOutputStream out = \nnew BufferedOutputStream(\nnew FileOutputStream(\"outagain.txt\"));\n\nout.write(100); \n\n out.close();",
                "val": "Writes byte data to file but writes data to a buffer, and the native output API is called only when the buffer is full."
            }
        ],
        "Data Streams": [
            {
                "key": "DataInputStream in = new DataInputStream(\nnew BufferedInputStream(\n new FileInputStream(\"input.txt\")));\n\n int doubleValue = in.readDouble();\n int intValue = in.readInt(); \n String value = in.readUTF(); \n in.close();",
                "val": "Data streams support binary I/O of primitive data type values. DataInputStream can only be used as a wrapper for an existing byte stream."
            },
            {
                "key": "DataOutputStream out = \nnew DataOutputStream(\nnew BufferedOutputStream(\n new FileOutputStream(dataFile)));\n\n int doubleValue = out.writeDouble();\n int intValue = out.writeInt(); \n String value = out.writeUTF(); \n out.close();",
                "val": "A DataOutputStream can only be created as a wrapper for an existing byte stream object."
            }
        ]
    }
}