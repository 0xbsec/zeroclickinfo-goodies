{
    "id": "radare2_cheat_sheet",
    "name": "Radare2",
    "description": "Commands for radare2, a framework for reverse engineering and binary analysis",
    "metadata": {
        "sourceName": "GitHub",
        "sourceUrl": "https://github.com/radare/radare2book/blob/master/refcard/radare2_rc.pdf"
    },
    "aliases": ["r2"],
    "template_type": "code",
    "section_order": ["Survival Guide", "Flagspaces", "Flags", "Info", "Print string", "Visual mode", "Searching", "Saving", "Usable variables in expression"],
    "sections": {
        "Survival Guide": [{
            "val": "auto analyze",
            "key": "aa"
        }, {
            "val": "Disassemble function",
            "key": "pdf@fcn\\[Tab\\]"
        }, {
            "val": "List functions",
            "key": "f fcn\\[Tab\\]"
        }, {
            "val": "List strings",
            "key": "f str\\[Tab\\]"
        }, {
            "val": "Rename flag",
            "key": "fr <flagname> <newname>"
        }, {
            "val": "Print string",
            "key": "psz <offset>"
        }, {
            "val": "Find cross ref for a flag",
            "key": "arf <flag>"
        }],
        "Flagspaces": [{
            "val": "display flagspaces",
            "key": "fs"
        }, {
            "val": "select all flagspaces",
            "key": "fs *"
        }, {
            "val": "select one flagspace",
            "key": "fs <sections>"
        }],
        "Flags": [{
            "val": "list flags",
            "key": "f"
        }, {
            "val": "display flags in json",
            "key": "fj"
        }, {
            "val": "show flag length",
            "key": "fl"
        }, {
            "val": "show hexdump of flag",
            "key": "fx"
        }, {
            "val": "set flag comment",
            "key": "fC <name> <cmt>"
        }],
        "Info": [{
            "val": "Info on imports",
            "key": "ii"
        }, {
            "val": "Info on binary",
            "key": "iI"
        }, {
            "val": "Display entrypoint",
            "key": "ie"
        }, {
            "val": "Display sections",
            "key": "iS"
        }, {
            "val": "Display relocations",
            "key": "ir"
        }],
        "Print string": [{
            "val": "Print stringZ'",
            "key": "psz <offset>"
        }, {
            "val": "Print strings in current block",
            "key": "psb <offset>"
        }, {
            "val": "Show string with scaped chars",
            "key": "psx <offset>"
        }, {
            "val": "Print pascal string",
            "key": "psp <offset>"
        }, {
            "val": "Print wide string",
            "key": "psw <offset>"
        }],
        "Visual mode": [{
            "val": "Enter visual mode",
            "key": "V"
        }, {
            "val": "rotate modes (hex, disasm, debug, words, buf)",
            "key": "(p / P)"
        }, {
            "val": "Toggle (c)ursor",
            "key": "c"
        }, {
            "val": "Back to radare shell",
            "key": "q"
        }, {
            "val": "Move around (left-down-up-right)",
            "key": "hjkl"
        }, {
            "val": "follow address of jump/call",
            "key": "[Enter]"
        }, {
            "val": "step / step over",
            "key": "sS"
        }, {
            "val": "follow address of jump/call",
            "key": "[Enter]"
        }, {
            "val": "go/seek to given offset",
            "key": "o"
        }, {
            "val": "seek to program counter",
            "key": "."
        }, {
            "val": "in cursor mode search in current block",
            "key": "\/"
        }, {
            "val": "run radare command",
            "key": ":cmd"
        }, {
            "val": "add/remove comment",
            "key": ";\\[-\\]cmt"
        }, {
            "val": "change block size, [] = resize hex.cols",
            "key": "/*+-\\[\\]"
        }, {
            "val": "seek aligned to block size",
            "key": ">||<"
        }, {
            "val": "(i)nsert code",
            "key": "i"
        }, {
            "val": "(a)ssemble code",
            "key": "a"
        }, {
            "val": "visual (A)ssembler",
            "key": "A"
        }, {
            "val": "toggle breakpoint",
            "key": "b"
        }, {
            "val": "automatic block size",
            "key": "B"
        }, {
            "val": "define function, data, code, ...",
            "key": "d\\[f?\\]"
        }, {
            "val": "enter visual diff mode (set diff.from/to)",
            "key": "D"
        }, {
            "val": "edit eval configuration variables",
            "key": "e"
        }, {
            "val": "set/unset flag",
            "key": "f/F"
        }, {
            "val": "go seek to begin and end of file (0-$s)",
            "key": "gG"
        }, {
            "val": "mark/go to Key (any key)",
            "key": "mK/â€™K"
        }, {
            "val": "walk the mounted filesystems",
            "key": "M"
        }, {
            "val": "seek next/prev function/flag/hit (scr.nkey)",
            "key": "n/N"
        }, {
            "val": "toggle (C)olors",
            "key": "C"
        }, {
            "val": "randomize color palette (ecr)",
            "key": "R"
        }, {
            "val": "track flags (browse symbols, functions..)",
            "key": "t"
        }, {
            "val": "browse anal info and comments",
            "key": "T"
        }, {
            "val": "visual code analysis menu",
            "key": "v"
        }, {
            "val": "(V)iew graph (agv?)",
            "key": "V"
        }, {
            "val": "open (W)ebUI",
            "key": "W"
        }, {
            "val": "undo/redo seek",
            "key": "uU"
        }, {
            "val": "show xrefs to seek between them",
            "key": "x"
        }, {
            "val": "copy and paste selection",
            "key": "yY"
        }, {
            "val": "toggle zoom mode",
            "key": "z"
        }],
        "Searching": [{
            "val": "search for string foo\\0",
            "key": "\/ foo\\\\00"
        }, {
            "val": "search backwards",
            "key": "\/b"
        }, {
            "val": "repeat last search",
            "key": "\/\/"
        }, {
            "val": "search for wide string f\\0o\\0o\\0",
            "key": "\/w foo"
        }, {
            "val": "search for wide string ignoring case",
            "key": "\/wi foo"
        }, {
            "val": "search for first occurrence not matching",
            "key": "\/! ff"
        }, {
            "val": "search for string foo ignoring case",
            "key": "\/i foo"
        }, {
            "val": "match regular expression",
            "key": "\/e \/E.F\/i"
        }, {
            "val": "search for hex string",
            "key": "\/x ff0.23"
        }, {
            "val": "search for hex string ignoring some nibbles",
            "key": "\/x ff..33"
        }, {
            "val": "search for hexpair with mask",
            "key": "\/x ff43 ffd0"
        }, {
            "val": "search for a deltified sequence of bytes",
            "key": "\/d 101112"
        }, {
            "val": "inverse hexa search (find first byte != 0x00)",
            "key": "\/!x 00"
        }, {
            "val": "search for asm code (see search.asmstr)",
            "key": "\/c jmp <esp>"
        }, {
            "val": "assemble opcode and search its bytes",
            "key": "\/a jmp eax"
        }, {
            "val": "search for AES expanded keys",
            "key": "\/A"
        }, {
            "val": "analyze opcode reference an offset",
            "key": "\/r sym.printf"
        }, {
            "val": "search for ROP gadgets",
            "key": "\/R"
        }, {
            "val": "show offset of previous instruction",
            "key": "\/P"
        }, {
            "val": "search for matching magic file",
            "key": "\/m magicfile"
        }, {
            "val": "search for pattern of given size",
            "key": "\/p patternsize"
        }, {
            "val": "search for strings of given size",
            "key": "\/z min max"
        }, {
            "val": "look for a asm.bigendian 32bit value",
            "key": "\/v\\[?248\\] num"
        }],
        "Saving": [{
            "val": "open project",
            "key": "Po <file>"
        }, {
            "val": "save project",
            "key": "Ps <file>"
        }, {
            "val": "show project information",
            "key": "Pi <file>"
        }],
        "Usable variables in expression": [{
            "val": "here (current virtual seek)",
            "key": "$$"
        }, {
            "val": "here (current disk io offset)",
            "key": "$o"
        }, {
            "val": "file size",
            "key": "$s"
        }, {
            "val": "block size",
            "key": "$b"
        }, {
            "val": "get word size, 4 if asm.bits=32, 8 if 64",
            "key": "$w"
        }, {
            "val": "get width of terminal",
            "key": "$c"
        }, {
            "val": "get height of terminal",
            "key": "$r"
        }, {
            "val": "section offset",
            "key": "$S"
        }, {
            "val": "section size",
            "key": "$SS"
        }, {
            "val": "jump address (jmp 0x10, jz 0x10 => 0x10)",
            "key": "$j"
        }, {
            "val": "jump fail address (jz 0x10 => next instruction)",
            "key": "$f"
        }, {
            "val": "number of instructions of current function",
            "key": "$I"
        }, {
            "val": "current function size",
            "key": "$F"
        }, {
            "val": "get nth jump of function",
            "key": "$Jn"
        }, {
            "val": "get nth call of function",
            "key": "$Cn"
        }, {
            "val": "get nth data reference in function",
            "key": "$Dn"
        }, {
            "val": " get nth xref of function",
            "key": "$Xn"
        }, {
            "val": "opcode memory reference (mov eax,[0x10] => 0x10)",
            "key": "$m"
        }, {
            "val": "opcode length",
            "key": "$l"
        }, {
            "val": "1 if end of block, else 0",
            "key": "$e"
        }, {
            "val": "get value of eval config variable",
            "key": "$ev"
        }, {
            "val": "last comparision value",
            "key": "$?"
        }]
    }
}
