{
    "id": "cpp_maps_cheat_sheet",
    "name": "C++ Map",
    "description": "C++ <map> are associative containers that store elements formed by a combination of a key value and a mapped value, following a specific order",

    "metadata": {
        "sourceName": "cplusplus.com",
        "sourceUrl" : "http://www.cplusplus.com/reference/map/map/"
    },

    "aliases": [
        "cpp map",
        "c++ maps",
        "c++ map"
    ],

    "template_type": "terminal",

    "section_order": [
        "Iterators",
        "Capacity",
        "Element Access",
        "Modifiers",
        "Non-member Functions",
        "Helper Classes"
    ],

    "sections": {
        "Iterators": [
            {
                "key": "mymap.begin()",
                "val": "Returns an iterator referring to the first element in the map container"
            },
            {
                "key": "mymap.end()",
                "val": "Returns an iterator referring to the past-the-end element in the map container"
            },
            {
                "key": "mymap.rbegin()",
                "val": "Returns a reverse iterator pointing to the last element in the container"
            },
            {
                "key": "mymap.rend()",
                "val": "Returns a reverse iterator pointing to the theoretical element right before the first element in the map container"
            },
            {
                "key": "mymap.cbegin()",
                "val": "Returns a const_iterator pointing to the first element in the container"
            },
            {
                "key": "mymap.cend()",
                "val": "Returns a const_iterator pointing to the past-the-end element in the container"
            },
            {
                "key": "mymap.crbegin()",
                "val": "Returns a const_reverse_iterator pointing to the last element in the container"
            },
            {
                "key": "mymap.crend()",
                "val": "Returns a const_reverse_iterator pointing to the theoretical element preceding the first element in the container "
            }
        ],
        "Capacity": [
            {
                "key": "mymap.size()",
                "val": "Returns the number of elements in the map container"
            },
            {
                "key": "mymap.max_size()",
                "val": "Returns the maximum number of elements that the map container can hold"
            },
            {
                "key": "mymap.empty()",
                "val": "Returns whether the map container is empty"
            }
        ],
        "Element Access": [
            {
                "key": "mymap[i]",
                "val": "Returns a reference to the value that is mapped to a key equivalent to key, performing an insertion if such key does not already exist"
            },
            {
                "key": "mymap.at(k)",
                "val": "Returns a reference to the mapped value of the element identified with key k"
            }
        ],
        "Modifiers": [
            {
                "key": "arr.fill(5)",
                "val": "Sets val as the value for all the elements in the array object"
            },
            {
                "key": "first.swap(second)",
                "val": "Exchanges the content of the array by the content of x, which is another array object of the same type"
            }
        ],
        "Non-member Functions": [
            {
                "key": "std::get<i>(arr)",
                "val": "Returns a reference to the ith element of array arr"
            },
            {
                "key": "Operators: ==, !=, <, <=, >, >=",
                "val": "Performs the appropriate comparison operation between the array containers lhs and rhs"
            }
        ],
        "Helper Classes": [
            {
                "key": "struct tuple_element<I, std::array<T,N>>",
                "val": "Accesses the static type of the elements in an array object as if it was a tuple"
            },
            {
                "key": "std::tuple_size<T>::value",
                "val": "Provides access to the number of elements in an std::array as a compile-time constant expression"
            }
        ]
    }
}
