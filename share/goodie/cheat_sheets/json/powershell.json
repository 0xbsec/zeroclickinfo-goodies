{
    "id": "powershell_cheat_sheet",
    "name": "PowerShell",
    "description": "Cheat sheet for syntax, operators, and operations in the PowerShell language",

    "metadata": {
        "sourceName": "TechNet",
        "sourceUrl" : "https://technet.microsoft.com/en-us/library/hh847856.aspx"
    },

    "aliases": [
        "power shell", "posh"
    ],

    "template_type": "code",

    "section_order": [
        "Arithmetic Operators",
        "Assignment Operators",
        "Comparison Operators",
        "Logical Operators",
        "Redirection Operators",        
        "Type Operators",
        "Special Operators",
        "Pipeline",
        "Strings",
        "Loops"    
    ],

    "sections": {
        "Redirection Operators": [
            {
                "key": "cmd > file",
                "val": "Send success output to file (overwrite)"
            },
            {
                "key": "cmd >> file",
                "val": "Send success output to file (append)"
            },
            {
                "key": "cmd 1>&2",
                "val": "Send success and error output to error stream"
            },            
            {
                "key": "cmd 2> file",
                "val": "Send error output to file (overwrite)"
            },
            {
                "key": "cmd 2>> file",
                "val": "Send error output to file (append)"
            },
            {
                "key": "cmd 2>&1",
                "val": "Send cmd and error output to success output stream"
            },
            {
                "key": "cmd 3> file",
                "val": "Send warning output to file (overwrite)"
            },
            {
                "key": "cmd 3>> file",
                "val": "Send warning output to file (append)"
            }, 
            {
                "key": "cmd 3>&1",
                "val": "Send success and warning output to success output stream"
            },            
            {
                "key": "cmd 4> file",
                "val": "Send verbose output to file (overwrite)"
            },            
            {
                "key": "cmd 4>> file",
                "val": "Send verbose output to file (append)"
            },
            {
                "key": "cmd 4>&1",
                "val": "Send success and verbose output to success output stream"
            },                   
            {
                "key": "cmd 5> file",
                "val": "Send debug output to file (overwrite)"
            },            
            {
                "key": "cmd 5>> file",
                "val": "Send debug output to file (append)"
            },            
            {
                "key": "cmd 5>&1",
                "val": "Send success and debug output to debug stream"
            },  
            {
                "key": "cmd *> file",
                "val": "Send all output streams to file (overwrite)"
            },            
            {
                "key": "cmd *>> file",
                "val": "Send all output streams to file (append)"
            },                 
            {
                "key": "cmd *>&1 file",
                "val": "Send all output streams to success output stream"
            }                   
        ],
        "Pipeline": [
            {
                "key": "cmd1 | cmd2",
                "val": "Send (pipe) output of cmd1 to cmd2; if output is a collection, objects are sent one at a time"
            },
            {
                "key": "$_",
                "val": "The current object in the pipeline"
            },
            {
                "key": "cmd | ForEach-Object \\{ ... \\}",
                "val": "Loop each object in the pipeline"
            },
            {
                "key": "cmd | % \\{ ... \\}",
                "val": "Alias of ForEach-Object"
            },            
            {
                "key": "cmd | Where-Object \\{ ... \\}",
                "val": "Filter each object in the pipeline by the given expression"
            },  
            {
                "key": "cmd | ? \\{ ... \\}",
                "val": "Alias of Where-Object"
            }                   
        ],   
        "Strings": [
            {
                "key": "''",
                "val": "String literal; single-quoted strings do not support substitution"
            }, 
            {
                "key": "\"\"",
                "val": "String literal; double-quoted strings do support substitution"
            },      
            {
                "key": "\"$myVariable\"",
                "val": "Variable expansion"
            },      
            {
                "key": "\"$(2 + 3)\"",
                "val": "Expression expansion"
            },   
            {
                "key": "-join",
                "val": "Combine multiple strings into a single string"
            },    
            {
                "key": "-split",
                "val": "Separate single string into substrings"
            }     
        ],
        "Loops": [
            {
                "key": "for($i=1; $i -le 10; $i++)\\{Write-Host $i\\}",
                "val": "For loop writing from 1 to 10 in console"
            }, 
            {
                "key": "foreach ($service in Get-Service) \\{ $service.Status -eq \"Running\" \\}",
                "val": "Foreach loop iterating all services and outputting true/false depending on each service's status"
            },      
            {
                "key": "while($val -ne 10) \\{ $val++ ; Write-Host $val \\}",
                "val": "While loop writing from 1 to 10 in console"
            }           
        ],        
        "Arithmetic Operators": [
            {
                "key": "1 + 2",
                "val": "Addition"
            },
            {
                "key": "1 - 2",
                "val": "Subtraction"
            },  
            {
                "key": "-1",
                "val": "Set negative value"
            }, 
            {
                "key": "1 * 2",
                "val": "Multiplication"
            }, 
            {
                "key": "1 / 2",
                "val": "Division"
            },        
            {
                "key": "1 % 2",
                "val": "Modulus"
            },    
            {
                "key": "100 -shl 2",
                "val": "Bitwise Shift-left"
            },    
            {
                "key": "100 -shr 1",
                "val": "Bitwise Shift-right"
            }               
        ],        
        "Assignment Operators": [
            {
                "key": "=",
                "val": "Sets the value of a variable to the specified value"
            },
            {
                "key": "+=",
                "val": "Increases the value of a variable by the specified value"
            },  
            {
                "key": "+=",
                "val": "Appends the specified value to the existing value"
            },              
            {
                "key": "-=",
                "val": "Decreases the value of a variable by the specified value"
            }, 
            {
                "key": "*=",
                "val": "Multiplies the value of a variable by the specified value"
            }, 
            {
                "key": "*=",
                "val": "Appends the specified value to the existing value"
            },             
            {
                "key": "/=",
                "val": "Divides the value of a variable by the specified value"
            },        
            {
                "key": "%=",
                "val": "Divides the value of a variable by the specified value and then assigns the remainder (modulus) to the variable"
            },    
            {
                "key": "++",
                "val": "Increases the value of a variable, assignable property, or array element by 1"
            },    
            {
                "key": "--",
                "val": "Decreases the value of a variable, assignable property, or array element by 1"
            }                
        ],               
        "Comparison Operators": [
            {
                "key": "1 -eq 1",
                "val": "Equal to"
            },
            {
                "key": "1 -ne 2",
                "val": "Not equal to"
            },  
            {
                "key": "5 -gt 1",
                "val": "Greater-than"
            },              
            {
                "key": "5 -ge 5",
                "val": "Greater-than or equal to"
            }, 
            {
                "key": "5 -lt 10",
                "val": "Less-than"
            }, 
            {
                "key": "5 -le 5",
                "val": "Less-than or equal to"
            },             
            {
                "key": "\"MyString\" -like \"*String\"",
                "val": "Match using the wildcard character (*)"
            },        
            {
                "key": "\"MyString\" -notlike \"Other*\"",
                "val": "Does not match using the wildcard character (*)"
            },    
            {
                "key": "\"MyString\" -match \"String\"",
                "val": "Matches a string using regular expressions"
            },    
            {
                "key": "\"MyString\" -notmatch \"Other\"",
                "val": "Does not match a string using regular expressions"
            },         
            {
                "key": "\"abc\", \"def\" -contains \"def\"",
                "val": "Returns boolean true only when the test value (right) exactly matches at least one of the reference values (left)"
            },  
            {
                "key": "\"abc\", \"def\" -notcontains \"123\"",
                "val": "Returns boolean true only when the test value (right) does not exactly match at least one of the reference values (left)"
            },  
            {
                "key": "\"def\" -in \"abc\", \"def\"",
                "val": "Returns boolean true only when the test value (left) exactly matches at least one of the reference values (right)"
            },  
            {
                "key": "\"123\" -in \"abc\", \"def\"",
                "val": "Returns boolean true when the test value (left) is not an exact match for at least one of the reference values (right)"
            },        
            {
                "key": "\"Get-Process\" -replace \"Get\", \"Stop\"",
                "val": "Changes the specified elements of a value"
            }            
        ],    
        "Logical Operators": [
            {
                "key": "-and",
                "val": "Logical and"
            },
            {
                "key": "-or",
                "val": "Logical or"
            },  
            {
                "key": "-xor",
                "val": "Logical exclusive or"
            }, 
            {
                "key": "-not",
                "val": "Logical not"
            }, 
            {
                "key": "!",
                "val": "Logical not"
            }                   
        ],     
        "Type Operators": [
            {
                "key": "(get-date) -is \\[DateTime\\]",
                "val": "Returns boolean true when the input is an instance of the specified .NET Framework type."
            },
            {
                "key": "(get-date) -isNot \\[DateTime\\]",
                "val": "Returns boolean true when the input is not an instance of the specified .NET Framework type"
            },  
            {
                "key": "01/01/16 -as \\[DateTime\\]",
                "val": "Converts the input to the specified .NET Framework type"
            }                   
        ],                   
        "Special Operators": [
            {
                "key": "( expression )",
                "val": "Grouping expresion operator; Returns the result of a single contained statement"
            },
            {
                "key": "$( exp1; exp2 )",
                "val": "Subexpression operator; Returns the result of one or more contained statements"
            },    
            {
                "key": "@( exp1; exp2 )",
                "val": "Array subexpression operator; Returns the result of one or more contained statements as an array"
            },       
            {
                "key": "\\[datetime\\]::now",
                "val": "Static member operator; Calls the static properties operator and methods of a .NET Framework class"
            },       
            {
                "key": "$arr = 1,2,3",
                "val": "Comma operator (binary); the comma creates an array"
            },     
            {
                "key": "$arr = ,1",
                "val": "Comma operator (unary); the comma creates an array with one member. Place the comma before the member"
            },               
            {
                "key": "& notepad.exe",
                "val": "Call operator; Runs a command, script, or script block"
            },
            {
                "key": ". .\\sample.ps1",
                "val": "Dot-sourcing operator; Runs a script in the current scope so that any functions, aliases, and variables that the script creates are added to the current scope"
            },      
            {
                "key": "\"\\{0:N\\}\" -f 1.126",
                "val": "Format operator; Formats strings by using the format method of string objects"
            },      
            {
                "key": "1..10",
                "val": "Range operator; Represents the sequential integers in an integer array, given an upper and lower boundary"
            }                
        ]           
    }
}