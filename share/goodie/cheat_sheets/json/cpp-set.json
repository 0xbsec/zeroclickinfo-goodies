{
    "id": "cpp_set_cheat_sheet",
    "name": "C++ Set",
    "description": "C++ Sets are containers that store unique elements following a specific order",

    "metadata": {
        "sourceName": "cplusplus.com",
        "sourceUrl" : "http://www.cplusplus.com/reference/set/set/"
    },

    "aliases": [
        "c++ set",
        "c++ sets",
        "cpp sets",
        "c++ set container",
        "cpp set container"
    ],

    "template_type": "terminal",

    "section_order": [
        "Iterators",
        "Capacity",
        "Modifiers",
        "Observers",
        "Operations",
        "Allocator"
    ],

    "sections": {
        "Iterators": [
            {
                "key": "myset.begin()",
                "val": "Returns an iterator referring to the first element in the set container"
            },
            {
                "key": "myset.end()",
                "val": "Returns an iterator referring to the past-the-end element in the set container"
            },
            {
                "key": "myset.rbegin()",
                "val": "Returns a reverse iterator pointing to the last element in the container"
            },
            {
                "key": "myset.rend()",
                "val": "Returns a reverse iterator pointing to the theoretical element right before the first element in the set container"
            },
            {
                "key": "myset.cbegin()",
                "val": "Returns a const_iterator pointing to the first element in the container"
            },
            {
                "key": "myset.cend()",
                "val": "Returns a const_iterator pointing to the past-the-end element in the container"
            },
            {
                "key": "myset.crbegin()",
                "val": "Returns a const_reverse_iterator pointing to the last element in the container"
            },
            {
                "key": "myset.crend()",
                "val": "Returns a const_reverse_iterator pointing to the element that would theoretically precede the first element in the container"
            }
        ],
        "Capacity": [
            {
                "key": "myset.empty()",
                "val": "Returns whether the set container is empty"
            },
            {
                "key": "myset.size()",
                "val": "Returns the number of elements in the set container"
            },
            {
                "key": "myset.max_size()",
                "val": "Returns the maximum number of elements that the set container can hold"
            }
        ]
    }
}
